parameters:
  - name : current_sprint 
    type : string
  - name : minor
    type : string
  - name: artifact_name
    type: string
  - name: azure_subscription
    type: string
  - name: mfe
    type: string
  - name: version_number
    type: string
#  - name: environments
#    type: object
#    default: ["Digital_dev", "Digital_QA", "Digital_STG"]



steps:
      - checkout: self
        path: s/${{ parameters.artifact_name }}

      # - task: Npm@1
      #   displayName: 'NPM publish'
      #   inputs:
      #     name: '$(versionNumber)'
      #     command: publish
      #     publishRegistry: useExternalRegistry
      #     publishEndpoint: 'npmfeeds'
      #     customRegistry: useNpmrc
      #     customFeed: 'Cloud/t3'
      #     access: public
      #     #publishEndpoint: 'https://pkgs.dev.azure.com/csiseg/Cloud/_packaging/t3/npm/registry/'
        
      - task: Npm@1
        displayName: 'npm i'
        inputs:
         command: custom
         workingDir: $(Build.SourcesDirectory)/
         verbose: false
         customCommand: 'i'

      - task: Npm@1
        displayName: 'Unit test coverage'
        inputs:
          command: custom
          workingDir: $(Build.SourcesDirectory)
          verbose: false
          customCommand: 'run test'
        # continueOnError: false
          

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: 'coverage/TESTS*.xml'
          mergeTestResults: true
          testRunTitle: 'Publish ${{ parameters.artifact_name }} test results'

      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: 'coverage/cobertura-coverage.xml'
          reportDirectory: 'coverage'

      - task: Npm@1
        displayName: 'npm run build'
        inputs:
          command: custom
          workingDir: $(Build.SourcesDirectory)
          verbose: false
          customCommand: 'run build'

      - task: PowerShell@2
        displayName: Set the name of the build (i.e. the Build.BuildNumber)
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "Setting the name of the build to '$(buildName)'."
            Write-Host "##vso[build.updatebuildnumber]$(buildName)"

      - task: PowerShell@2
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          targetType: 'inline'
          script: |
            $myDate=$(Get-Date -format yy)
            Write-Host "##vso[build.addbuildtag]${{ parameters.artifact_name }}"
            Write-Host "##vso[build.addbuildtag]artifact-published"
            Write-Host "##vso[build.addbuildtag]$(Build.BuildId)"
            write-host "##vso[build.addbuildtag]$(versioNnumber).$(Build.BuildNumber)"
            Write-Host "##vso[task.setvariable variable=MyDate]$myDate"
    
        
      - task: Bash@3
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          targetType: 'inline'
          script: 'cp -r $(Build.SourcesDirectory)/dist $(Build.ArtifactStagingDirectory)/dist'

      - task: PublishBuildArtifacts@1
        displayName: Publish ${{ parameters.artifact_name }} Artifact
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          PathtoPublish: $(Build.ArtifactStagingDirectory)/dist
          ArtifactName: 'db-view-$(mfe)'
          publishLocation: 'Container'
      
      - task: DownloadBuildArtifacts@1
        displayName: Download ${{ parameters.artifact_name }} Build Artifact
        inputs:
          buildType: 'current'
          downloadType: 'specific'
          downloadPath: '$(System.ArtifactsDirectory)/dist'
        
      - task: Bash@3 
        displayName: Copying buildartifacts to the version folder
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          targetType: 'inline'
          script: 'mkdir -p $(mfe)/csi-$(mfe)/$(MyDate).${{ parameters.current_sprint }}.${{parameters.minor}}.$(Build.BuildNumber)/ && cp -r $(System.ArtifactsDirectory)/dist/${{ parameters.artifact_name }}/* $(mfe)/csi-$(mfe)/$(MyDate).${{ parameters.current_sprint }}.${{parameters.minor}}.$(Build.BuildNumber)/'

      # - task: AzureCLI@2
      #   displayName: Copying buildartifacts to $(env) storage account 
      #   inputs:
      #     azureSubscription: '${{ parameters.azure_subscription }}'
      #     scriptType: 'bash'
      #     scriptLocation: 'inlineScript'
      #     inlineScript: |
      #       az storage blob upload-batch -d "${{ parameters.artifact_name }}"  --account-name "stdigitalebg${{ parameters.environments }}cus" -s  "$(mfe)"

          